export declare const kcMessages: {
    ca: {
        invalidPasswordHistoryMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
    };
    de: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordNotEmailMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        invalidPasswordBlacklistedMessage: string;
        invalidPasswordGenericMessage: string;
    };
    en: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMaxLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordNotEmailMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        invalidPasswordBlacklistedMessage: string;
        invalidPasswordGenericMessage: string;
        ldapErrorInvalidCustomFilter: string;
        ldapErrorConnectionTimeoutNotNumber: string;
        ldapErrorReadTimeoutNotNumber: string;
        ldapErrorMissingClientId: string;
        ldapErrorCantPreserveGroupInheritanceWithUIDMembershipType: string;
        ldapErrorCantWriteOnlyForReadOnlyLdap: string;
        ldapErrorCantWriteOnlyAndReadOnly: string;
        ldapErrorCantEnableStartTlsAndConnectionPooling: string;
        ldapErrorCantEnableUnsyncedAndImportOff: string;
        ldapErrorMissingGroupsPathGroup: string;
        clientRedirectURIsFragmentError: string;
        clientRootURLFragmentError: string;
        clientRootURLIllegalSchemeError: string;
        clientBaseURLIllegalSchemeError: string;
        backchannelLogoutUrlIllegalSchemeError: string;
        clientRedirectURIsIllegalSchemeError: string;
        clientBaseURLInvalid: string;
        clientRootURLInvalid: string;
        clientRedirectURIsInvalid: string;
        backchannelLogoutUrlIsInvalid: string;
        pairwiseMalformedClientRedirectURI: string;
        pairwiseClientRedirectURIsMissingHost: string;
        pairwiseClientRedirectURIsMultipleHosts: string;
        pairwiseMalformedSectorIdentifierURI: string;
        pairwiseFailedToGetRedirectURIs: string;
        pairwiseRedirectURIsMismatch: string;
        "error-invalid-value": string;
        "error-invalid-blank": string;
        "error-empty": string;
        "error-invalid-length": string;
        "error-invalid-length-too-short": string;
        "error-invalid-length-too-long": string;
        "error-invalid-email": string;
        "error-invalid-number": string;
        "error-number-out-of-range": string;
        "error-number-out-of-range-too-small": string;
        "error-number-out-of-range-too-big": string;
        "error-pattern-no-match": string;
        "error-invalid-uri": string;
        "error-invalid-uri-scheme": string;
        "error-invalid-uri-fragment": string;
        "error-user-attribute-required": string;
        "error-invalid-date": string;
        "error-user-attribute-read-only": string;
        "error-username-invalid-character": string;
        "error-person-name-invalid-character": string;
    };
    es: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
    };
    fr: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
    };
    it: {};
    ja: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        invalidPasswordBlacklistedMessage: string;
        invalidPasswordGenericMessage: string;
        ldapErrorInvalidCustomFilter: string;
        ldapErrorConnectionTimeoutNotNumber: string;
        ldapErrorReadTimeoutNotNumber: string;
        ldapErrorMissingClientId: string;
        ldapErrorCantPreserveGroupInheritanceWithUIDMembershipType: string;
        ldapErrorCantWriteOnlyForReadOnlyLdap: string;
        ldapErrorCantWriteOnlyAndReadOnly: string;
        ldapErrorCantEnableStartTlsAndConnectionPooling: string;
        clientRedirectURIsFragmentError: string;
        clientRootURLFragmentError: string;
        pairwiseMalformedClientRedirectURI: string;
        pairwiseClientRedirectURIsMissingHost: string;
        pairwiseClientRedirectURIsMultipleHosts: string;
        pairwiseMalformedSectorIdentifierURI: string;
        pairwiseFailedToGetRedirectURIs: string;
        pairwiseRedirectURIsMismatch: string;
    };
    lt: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        ldapErrorInvalidCustomFilter: string;
        ldapErrorMissingClientId: string;
        ldapErrorCantPreserveGroupInheritanceWithUIDMembershipType: string;
        ldapErrorCantWriteOnlyForReadOnlyLdap: string;
        ldapErrorCantWriteOnlyAndReadOnly: string;
        clientRedirectURIsFragmentError: string;
        clientRootURLFragmentError: string;
        pairwiseMalformedClientRedirectURI: string;
        pairwiseClientRedirectURIsMissingHost: string;
        pairwiseClientRedirectURIsMultipleHosts: string;
        pairwiseMalformedSectorIdentifierURI: string;
        pairwiseFailedToGetRedirectURIs: string;
        pairwiseRedirectURIsMismatch: string;
    };
    nl: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        invalidPasswordGenericMessage: string;
        ldapErrorInvalidCustomFilter: string;
        ldapErrorConnectionTimeoutNotNumber: string;
        ldapErrorReadTimeoutNotNumber: string;
        ldapErrorMissingClientId: string;
        ldapErrorCantPreserveGroupInheritanceWithUIDMembershipType: string;
        ldapErrorCantWriteOnlyForReadOnlyLdap: string;
        ldapErrorCantWriteOnlyAndReadOnly: string;
        clientRedirectURIsFragmentError: string;
        clientRootURLFragmentError: string;
        pairwiseMalformedClientRedirectURI: string;
        pairwiseClientRedirectURIsMissingHost: string;
        pairwiseClientRedirectURIsMultipleHosts: string;
        pairwiseMalformedSectorIdentifierURI: string;
        pairwiseFailedToGetRedirectURIs: string;
        pairwiseRedirectURIsMismatch: string;
    };
    no: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        ldapErrorInvalidCustomFilter: string;
        ldapErrorMissingClientId: string;
        ldapErrorCantPreserveGroupInheritanceWithUIDMembershipType: string;
        ldapErrorCantWriteOnlyForReadOnlyLdap: string;
        ldapErrorCantWriteOnlyAndReadOnly: string;
    };
    pl: {};
    "pt-BR": {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        ldapErrorInvalidCustomFilter: string;
        ldapErrorMissingClientId: string;
        ldapErrorCantPreserveGroupInheritanceWithUIDMembershipType: string;
        ldapErrorCantWriteOnlyForReadOnlyLdap: string;
        ldapErrorCantWriteOnlyAndReadOnly: string;
        clientRedirectURIsFragmentError: string;
        clientRootURLFragmentError: string;
    };
    ru: {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        invalidPasswordGenericMessage: string;
        ldapErrorInvalidCustomFilter: string;
        ldapErrorMissingClientId: string;
        ldapErrorCantPreserveGroupInheritanceWithUIDMembershipType: string;
        ldapErrorCantWriteOnlyForReadOnlyLdap: string;
        ldapErrorCantWriteOnlyAndReadOnly: string;
        clientRedirectURIsFragmentError: string;
        clientRootURLFragmentError: string;
        pairwiseMalformedClientRedirectURI: string;
        pairwiseClientRedirectURIsMissingHost: string;
        pairwiseClientRedirectURIsMultipleHosts: string;
        pairwiseMalformedSectorIdentifierURI: string;
        pairwiseFailedToGetRedirectURIs: string;
        pairwiseRedirectURIsMismatch: string;
    };
    "zh-CN": {
        invalidPasswordMinLengthMessage: string;
        invalidPasswordMinLowerCaseCharsMessage: string;
        invalidPasswordMinDigitsMessage: string;
        invalidPasswordMinUpperCaseCharsMessage: string;
        invalidPasswordMinSpecialCharsMessage: string;
        invalidPasswordNotUsernameMessage: string;
        invalidPasswordRegexPatternMessage: string;
        invalidPasswordHistoryMessage: string;
        ldapErrorInvalidCustomFilter: string;
        ldapErrorConnectionTimeoutNotNumber: string;
        ldapErrorMissingClientId: string;
        ldapErrorCantPreserveGroupInheritanceWithUIDMembershipType: string;
        ldapErrorCantWriteOnlyForReadOnlyLdap: string;
        ldapErrorCantWriteOnlyAndReadOnly: string;
        clientRedirectURIsFragmentError: string;
        clientRootURLFragmentError: string;
        pairwiseMalformedClientRedirectURI: string;
        pairwiseClientRedirectURIsMissingHost: string;
        pairwiseClientRedirectURIsMultipleHosts: string;
        pairwiseMalformedSectorIdentifierURI: string;
        pairwiseFailedToGetRedirectURIs: string;
        pairwiseRedirectURIsMismatch: string;
    };
};
